FTN77,S
$FILES 0,2
      PROGRAM SPOHJY
C     ==============        MJG <960404.0815>
C     Batch type program to
C     convert specified spectra from Kelvins to Janskys
C     This program converts spectra from Kelvins to Janskys,
C     using the appropriate point source sensitivity, listed below
c        (this is the automatic mode)
C     or a PSS supplied by the user (manual mode).
c     known 18 cm OH spectra sensitivity changes :
c
c PERIOD          PSS (Jy/K)  SUBREF TILTED   FLANGE ON  CORR INPUT
c                 1666  1612
c start
c (1978 d  1 : 12H)
c (JD 2443509.000)
c to              15.8  19.0      no            yes       1.0 V NON-AGC VIDEO
c 1986 d 105 (9H 58M)
c JD 2446536.138
c to              12.8  15.4      no            yes       1.7 V      "
c 1990 d 61 (12H)
c JD 2447953.000
c to              13.4  16.1      no            no        1.7 V      "
c 1990 d 215 (12H)
c JD 2448107.000
c to              12.8  15.4      no            yes       1.7 V      "
c 1990 d 229 (12H)
c JD 2448121.000
c to              10.3  12.0      yes           yes       1.7/1.5 V  "
c 1991 d  90 (12H)
c JD 2448347.000
c to              10.3  12.0      yes           yes       1.0 V AGC VIDEO
c 1992 d  86 (12H)
c JD 2448708.000
c High Level ND
c to              10.3  12.0      yes           yes       1.0 V     "
c 1994 d 183 (9H 58M)
c JD 2449535.915
c Noise Adding
c onwards         10.3  12.0      yes           yes       1.0 V     "
c (1999 d  0 : 12H)
c (JD 2451179.000)
c
C see /MIKE/PROGS/SPPROGS.DOC
C
      PARAMETER (NPTS=256, IRECSIZE=700, IBLOCKS=6)
C
      CHARACTER INFILE*40, OUTFILE*40, FILEOPT*1, NAME*20, CDATE*30,
     &          CUNIT*2, ANSWER*1
      LOGICAL   EXISTS, NOTLAST, STANDARD
      INTEGER*2 IDATA(IRECSIZE), LARGEBUF(IRECSIZE), IDATE(15), IT(5)
      REAL*4    RDATA(IRECSIZE/2), STDPSS(IBLOCKS), STWPSS(IBLOCKS)
      REAL*8    DDATA(IRECSIZE/4), YCHANGE(IBLOCKS),
     &          STFROMUT, DTR, XRA, XDEC, DELR, DELD, DC,
     &          STSTART, STMID, STEND, TOBS,
     &          HARAD, AZRAD, ELRAD, ATMOSCOR, ELDEG, HADEG, DECPRC
C
      EQUIVALENCE (IDATA,RDATA), (IDATA,DDATA),  (IDATE,CDATE),
     &            (NAME,   IDATA(517)),
     &            (CUNIT,  IDATA(538))
C
C     Changes in point source sensitivity
C
C     Year      Day   Time (UT)   JD           1666 MHz   1612 MHz
C
C     1978        1   12H 00M     2443509.000    15.8       19.0
C     1986      105   09H 58M     2446536.138    12.8       15.4
C     1990       61   12H 00M     2447953.000    13.4       16.1
C     1990      215   12H 00M     2448107.000    12.8       15.4
C     1990      229   12H 00M     2448121.000    10.3       12.0
C     1999        0   12H 00M     2451179.000    10.3       12.0
C
      DATA YCHANGE /2443509.000D0, 2446536.138D0, 2447953.000D0,
     &              2448107.000D0, 2448121.000D0, 2451179.000D0/
C
C     STanDard (1666 MHz) Point Source Sensitivity from given date
      DATA STDPSS  /15.8, 12.8, 13.4, 12.8, 10.3, 10.3/
C
C     Sixteen TWelve (1612 MHz) Point Source Sensitivity from given date
      DATA STWPSS  /19.0, 15.4, 16.1, 15.4, 12.0, 12.0/
C
C     Degrees to Radians conversion : pi/180 deg
      DATA DTR /0.017453293D0/
C
C     assign print and read devices
      CALL FSYSU (1,1)
C     set up the buffer required for large record file I/O
      CALL LGBUF (LARGEBUF,IRECSIZE)
c
      CALL FTIME(IDATE)
      PRINT *,'  SPOHJY :  ',CDATE
      PRINT *,'  Input spectra file to convert to Jy ? _'
      READ  '(A)', INFILE
C
      PRINT *,'  First and last records to convert (/ = all) ? _'
      IFIRST = 1
      ILAST  = 32767
      READ *, IFIRST, ILAST
C
      PRINT *,'  Name for the output file ? _'
      READ  '(A)', OUTFILE
C
      INQUIRE (FILE=INFILE, EXIST=EXISTS)
      IF (.NOT. EXISTS) STOP 'INPUT FILE DOES NOT EXIST'
C
      INQUIRE (FILE=OUTFILE, EXIST=EXISTS)
C
      IF (EXISTS) THEN
          PRINT *,'Output file already exists :'
          PRINT *,'  Quit (Q), Overwrite (O), or Append (A)',
     &            ' to output file ? _'
          READ  '(A)',FILEOPT
          CALL UPCASE (FILEOPT)
C
          IF (FILEOPT .EQ. 'O') THEN
              PRINT *,'  OKAY TO OVERWRITE OUTPUT FILE (O) ? _'
              READ '(A)',FILEOPT
              CALL UPCASE (FILEOPT)
          END IF
      ELSE
C         new output file
          FILEOPT = 'N'
      END IF
C
      IF (FILEOPT .NE. 'O' .AND. FILEOPT .NE. 'A'
     &    .AND. FILEOPT .NE. 'N') STOP 'bye'
C
      OPEN (100, FILE=INFILE,  STATUS='OLD', IOSTAT=IOS, ERR=900)
      OPEN (101, FILE=OUTFILE, IOSTAT=IOS, ERR=900)
C
      IF (FILEOPT .EQ. 'A') THEN
C         advance to the end of the output file
          IRECOUT = 0
          DO WHILE (.TRUE.)
              READ (101,IOSTAT=IOS,ERR=900,END=100) JUNK
              IRECOUT = IRECOUT + 1
          END DO
      END IF
  100 CONTINUE
C
*     Read 1st record to get Line Rest Frequency for PSS values
      READ (100,IOSTAT=IOS,ERR=900,END=150)
     &     (IDATA(I),I=1,IRECSIZE)
      REWIND (100)
  150 CONTINUE
C
      PRINT *,' '
      PRINT *,'18 cm RECEIVER + CORRELATOR SENSITIVITY :'
      PRINT *,'START (JD)    END (JD)         PSS (Jy/K)'
*     Get PSS for 1665 and/or 1667  MHz observations
      IF ((IDINT(DDATA(162)) .EQ. 1665) .OR.
     &    (IDINT(DDATA(162)) .EQ. 1667)) THEN
          DO I = 1, IBLOCKS-1
              PRINT '(F12.3,A2,F12.3,F10.2)',
     &        YCHANGE(I),'  to  ',YCHANGE(I+1),STDPSS(I)
          END DO
      END IF
*     Get PSS for 1612 MHz observations
      IF (IDINT(DDATA(162)) .EQ. 1612) THEN
          DO I = 1, IBLOCKS-1
              PRINT '(F12.3,A2,F12.3,F10.2)',
     &        YCHANGE(I),'  to  ',YCHANGE(I+1),STWPSS(I)
          END DO
      END IF
*
      PRINT *,'  Use these point source sensitivity values (Y/N) ? _'
      READ '(A)', ANSWER
      CALL UPCASE(ANSWER)
      IF (ANSWER .EQ. 'Y' .OR. ANSWER .EQ. 'T') THEN
          STANDARD = .TRUE.
      ELSE
          STANDARD = .FALSE.
          PRINT *, '  Point source sensitivity (Jy/K) ? _'
          READ  *, PSS
      END IF
C
      PRINT *,
     &'Rec In  Name                 Year Day   Obs    PSS  Rec Out'
C
      IRECIN = 0
      NOTLAST = .TRUE.
      DO WHILE (NOTLAST)
          READ (100,IOSTAT=IOS,ERR=900,END=200)
     &         (IDATA(I),I=1,IRECSIZE)
          IRECIN = IRECIN + 1
C
          IF (IRECIN .GE. IFIRST .AND. IRECIN .LE. ILAST) THEN
*
*         Calculate Julian date from UT if not present
*
              IF (DDATA(166) .EQ. 0D0) THEN
c                 PRINT *,' Calculating Julian Date... _'
                  IT(1) = 0                       ! 10s of milliseconds
                  IT(2) = IDATA(531)              ! seconds
                  IT(3) = IDATA(530)              ! minutes
                  IT(4) = IDATA(529)              ! hours
                  IT(5) = IDATA(528)              ! days
                  CALL JD (IDATA(527),IT,DDATA(166))
c                 PRINT *,DDATA(166)
              END IF
*
c             copy records in the specified range
              IF (CUNIT .EQ. 'JY') THEN
                  PRINT *,'NO CHANGE - SPECTRUM IN Jy !'
              ELSE
                  IF (STANDARD) THEN
*                     Get appropriate 1665/1667 MHz PSS for this spectrum
                      IF ((IDINT(DDATA(162)) .EQ. 1665) .OR.
     &                    (IDINT(DDATA(162)) .EQ. 1667)) THEN
                          DO I = 1, IBLOCKS-1
                              IF (DDATA(166) .GE. YCHANGE(I) .AND.
     &                            DDATA(166) .LT. YCHANGE(I+1)) THEN
                                  PSS = STDPSS(I)
                              END IF
                          END DO
                      END IF
*                     Else get appropriate 1612 MHz PSS for this spectrum
                      IF (IDINT(DDATA(162)) .EQ. 1612) THEN
                          DO I = 1, IBLOCKS-1
                              IF (DDATA(166) .GE. YCHANGE(I) .AND.
     &                            DDATA(166) .LT. YCHANGE(I+1)) THEN
                                  PSS = STWPSS(I)
                              END IF
                          END DO
                      END IF
                  END IF
C                 reset units, scale the spectrum by pss
                  CUNIT = 'JY'
                  RDATA(296) = PSS
                  DO I = 1,256
                      RDATA(I) = RDATA(I) * RDATA(296)
                  END DO
              END IF
C             recalculate rms noise in baseline
              CALL ARMS (IDATA,RDATA)
*
*     Remove atmospheric effects:
*     Reqd. : Precessed RA and Dec of the source (in radians)
*             HA at the middle of the observation (in redians)
*
*             Precess RA from 1950 co-ords to current
*             Convert co-ords to radians
              XRA = RDATA(300) * DTR
              XDEC = RDATA(301) * DTR
*             Precess
              CALL MOVE (1950,IDATA(527),1,IDATA(528),XRA,XDEC,DELR,
     &                   DELD,DC)
              XRA = XRA + DELR
              XDEC = XDEC + DELD
*             Convert co-ords back to degrees
              RAPRC = XRA/DTR
              DECPRC = XDEC/DTR
c             PRINT *,'Precessed Dec.: ',DECPRC
C
C             Calculate mid-hour angle of obs. if not already done
              IF (ABS(RDATA(340)) .EQ. 0.0) THEN
C
c                 PRINT *,'End HA =',RDATA(304),' deg.'
*
*                 check if these are OH-MON spectra or not:
*                 18cm, 0.64 BW, 15 min int., freq-sw off.: 0.316800 MHz
                  CHFRQOF = ABS(DDATA(164) - 0.316800D0) ! accuracy problem
                  IF ((DDATA(162) .LT. 2000D0) .AND. (RDATA(291) .EQ.
     &                 0.64) .AND. (RDATA(292) .EQ. 420.0) .AND.
     &                (CHFRQOF .LT. 1D-6)) THEN
c                     PRINT *,' OH-MON spectrum '
*                     Length of observations:
*                     ~17 mins up to 1988 day 187 & ~15 mins after
*                     UT of 1st OH-MON spectrum of ~15 mins:
*                     1988 day 187 @ 7H 6M : JD 2447347.796
                      IF (DDATA(166) .LT. 2447347.796D0) THEN
                          TOBS = 1020D0 ! 17 mins x 60 secs
                      ELSE
                          TOBS = 900D0  ! 15 mins x 60 secs
                      END IF
                  ELSE
*                 (if not OH-MON spectra)
c                     PRINT *,' Not OH-MON spectrum '
*                     allow for longer calibration time before 1988 day 187
*                     1988 day 187 @ 7H 6M : JD 2447347.796
                      IF (DDATA(166) .LT. 2447347.796D0) THEN
*                         observation time is:
*                         2x on-source integ. time (secs) + cal. time (secs)
                          TOBS = RDATA(292)*2D0 + 180D0
                      ELSE
                          TOBS = RDATA(292)*2D0 + 60D0
                      END IF
                  END IF
*
*                 Calculate HA at middle and end of observation
*
*                 Get ST at start of observation
                  STSTART = STFROMUT (IDATA(527),IDATA(528),IDATA(529),
     &                                IDATA(530),IDATA(531),0)
*
                  STMID = STSTART + TOBS/2D0
                  STEND = STSTART + TOBS
*                 Convert STMID & STEND from seconds to degrees
                  STMID = STMID/240D0 ! 360 deg / 86400 sec = 240
                  STEND = STEND/240D0 ! 360 deg / 86400 sec = 240
*
*                 HA = ST(at middle or end) - RA(precessed)
                  RDATA(340) = STMID - RAPRC
*                 if end HA was not recorded - record calculated end HA
                  IF (ABS(RDATA(304)) .EQ. 0.0) THEN
                      RDATA(304) = STEND - RAPRC
                      IF ((RDATA(304)) .LT. 0.0) THEN
                          RDATA(304) =  RDATA(304) + 360.0
                      END IF
*                     check if recorded end HA is in correct range
                      IF ((RDATA(304) .GE. 0.0 .AND. RDATA(304) .LE.
     &                     90.0) .OR. (RDATA(304) .GE. 270.0 .AND.
     &                     RDATA(304) .LE. 360.0)) THEN
c                          PRINT *,'Recorded end HA =',RDATA(304),' deg'
                      ELSE
                          STOP 'Recorded end HA is wrong!'
                      END IF
                  END IF
*                 calc. end HA to print to screen (even if end HA recorded)
                  HAEND = STEND - RAPRC
*
                  IF (RDATA(340) .LT. 0.0) THEN
                      RDATA(340) = RDATA(340) + 360.0
                  END IF
*                 check if mid HA is in correct range
                  IF ((RDATA(340) .GE. 0.0 .AND. RDATA(340) .LE. 90.0)
     &                .OR. (RDATA(340) .GE. 270.0 .AND. RDATA(340)
     &                .LE. 360.0)) THEN
c                     PRINT *,'Computed mid HA =',RDATA(340),' deg.'
                  ELSE
                      STOP 'Computed mid HA is wrong!'
                  END IF
*
                  IF (HAEND .LT. 0.0) HAEND = HAEND + 360.0
*                 check if end HA is in correct range
                  IF ((HAEND .GE. 0.0 .AND. HAEND .LE. 90.0) .OR.
     &                (HAEND .GE. 270.0 .AND. HAEND .LE. 360.0)) THEN
c                     PRINT *,'Computed end HA =',HAEND,' deg.'
                  ELSE
                      STOP 'Computed end HA is wrong!'
                  END IF
              END IF
*
*             Calculate the atmospheric correction (using SLAP formula)
*
*             convert precessed mid-HA to radians
              HARAD = - RDATA(340) * DTR  ! minus sign reqd. (cf. AZEL.FTN)
c             HADEG = HARAD/DTR
c             PRINT *,'HA : ',HADEG
*
*             get azimuth and elevation of source for SLAP formula
              CALL AZALT (0D0,HARAD,XDEC,AZRAD,ELRAD)
c             PRINT *,'Elevation : ',ELRAD
c             ELDEG = ELRAD/DTR
c             PRINT *,ELDEG
  
*             calculate SLAP atmospheric correction
              ATMOSCOR =  DEXP(0.0069D0*(1D0/DSIN(ELRAD)-1D0))
c             PRINT *,'Atmospheric correction : ',ATMOSCOR
*
*             apply SLAP correction to spectrum
              DO I = 1,IDATA(535)
                  RDATA(I) = RDATA(I) * ATMOSCOR
              END DO
C
C             write the spectrum to the output file
              WRITE (101,IOSTAT=IOS,ERR=900) (IDATA(I),I=1,IRECSIZE)
              IRECOUT = IRECOUT + 1
              PRINT 1100, IRECIN, NAME, IDATA(527), IDATA(528),
     &                    IDATA(533), RDATA(296), IRECOUT
          END IF
          IF (IRECIN .EQ. ILAST) NOTLAST = .FALSE.
      END DO
C
  200 CLOSE (100)
      CLOSE (101)
      STOP 'done'
C
 1100 FORMAT (I6,3X,A20,I5,I4,I6,F7.2,1X,I7)
C
  900 PRINT *,'ERROR ',IOS,' IN FILE I/O'
      END
************************
      include /MIKE/PROGS/UPCASE.SUB
      include /MIKE/PROGS/ARMS.SUB
      include /MIKE/PROGS/JD.SUB
      include /MIKE/PROGS/MOVE.SUB
      include /MIKE/PROGS/AZALT.FTN
      include /MIKE/PROGS/STFROMUT.SUB
************************
